name: BuildX

on:
  push:
    branches: [ main ]
  
jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_FILE: Dockerfile
      PLATFORMS: linux/amd64 #,linux/arm64
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      container_name: ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare üî∞
        id: prepare
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo ::set-output name=docker_image::${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform $PLATFORMS \
            --build-arg DENO_VERSION=v1.24.1 \
            --build-arg TARGETPLATFORM=$PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag $IMAGE_NAME:$VERSION --file $IMAGE_FILE .
      - name: Set up Docker Buildx üìê
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Buildx ‚öôÔ∏è
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

#       - name: Login to DockerHub üë§
#         if: success() && github.event_name != 'pull_request'
#         uses: docker/login-action@v2.0.0
#         with:
#           username: ${{ github.actor }}
#           password: ${{ secrets.DOCKER_TOKEN }}
#       - name: Docker Push üìå
#         if: success() && github.event_name != 'pull_request'
#         run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
#       - name: Inspect üîç
#         if: success() && github.event_name != 'pull_request'
#         run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Log into registry ${{ env.REGISTRY }} üë§
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: Dockerfile 
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.prepare.outputs.version }}

